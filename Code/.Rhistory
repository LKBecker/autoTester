source("W:/Pathology/Biochem/LKBecker/Projects/autoTester_CP/clinisys_Extract_Scenarios.R")
source("W:/Pathology/Biochem/LKBecker/Projects/autoTester_CP/clinisys_MRIScenarios_Advanced.R")
source("W:/Pathology/Biochem/LKBecker/Projects/autoTester_CP/clinisys_MRIScenarios_Advanced.R")
install.packages("stringdist")
#Libraries====
.libPaths("C:/Users/BECKEL201/Documents/R Libraries/") #Sets local libraries to avoid MASSIVE network lag...
#Why do R libraries on managed machines by default install into a faraway network share? Because frick you that's why
library(readxl)
library(data.table)
library(stringr)
library(stringdist)
library(stringdist)
#Libraries====
.libPaths("C:/Users/BECKEL201/Documents/R Libraries/") #Sets local libraries to avoid MASSIVE network lag...
#Why do R libraries on managed machines by default install into a faraway network share? Because frick you that's why
library(readxl)
library(data.table)
library(stringr)
library(stringdist)
install.packages("stringdist")
#Libraries====
.libPaths("C:/Users/BECKEL201/Documents/R Libraries/") #Sets local libraries to avoid MASSIVE network lag...
#Why do R libraries on managed machines by default install into a faraway network share? Because frick you that's why
library(readxl)
library(data.table)
library(stringr)
library(stringdist)
#Functions====
ffwrite <- function(x, FileName=NULL, Folder="./", ...) {
Timestamp = format(Sys.time(), "%y%m%d-%H%M%S_")
if (is.null(FileName)) { FileName = "QuickExport" }
if ( !(substr(Folder, nchar(Folder), nchar(Folder)) == .Platform$file.sep) ) { Folder = paste0(Folder, .Platform$file.sep) }
if (FileName!="clipboard") { FileName = paste0(Folder, Timestamp, FileName, ".tsv") }
message(sprintf("Exporting data.table to '%s'.", FileName))
write.table(x, file = FileName, quote=F, row.names = F, col.names = (length(colnames(x)) > 0),  sep="\t", ...)
}
#Libraries====
.libPaths("C:/Users/BECKEL201/Documents/R Libraries/") #Sets local libraries to avoid MASSIVE network lag...
#Why do R libraries on managed machines by default install into a faraway network share? Because frick you that's why
library(readxl)
library(data.table)
library(stringr)
library(stringdist)
#Functions====
ffwrite <- function(x, FileName=NULL, Folder="./", ...) {
Timestamp = format(Sys.time(), "%y%m%d-%H%M%S_")
if (is.null(FileName)) { FileName = "QuickExport" }
if ( !(substr(Folder, nchar(Folder), nchar(Folder)) == .Platform$file.sep) ) { Folder = paste0(Folder, .Platform$file.sep) }
if (FileName!="clipboard") { FileName = paste0(Folder, Timestamp, FileName, ".tsv") }
message(sprintf("Exporting data.table to '%s'.", FileName))
write.table(x, file = FileName, quote=F, row.names = F, col.names = (length(colnames(x)) > 0),  sep="\t", ...)
}
NewCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="A1:C503")
OldCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="E1:F896")
View(NewCodes)
NewCodes
OldCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="E1:F896")
OldCodes <- as.data.table(OldCodes)
OldCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="E1:F896")
OldCodes <- as.data.table(OldCodes)
OldCodes[,Test := toupper(Test)]
NewCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="A1:C503")
NewCodes <- as.data.table(NewCodes)
NewCodes[,Description:= toupper(Description)]
NewCodes[,subDesc := str_match(Description, "(.*)\\(")[,1]]
View(NewCodes)
NewCodes[,subDesc := str_match(Description, "(.*)\\(")[,2]]
View(NewCodes)
NewCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="A1:C503")
NewCodes <- as.data.table(NewCodes)
NewCodes[,Description:= toupper(Description)]
NewCodes[,subDesc := str_match(Description, "(.*) \\(")[,2]]
NewCodes[is.na(subDesc), subDesc := Description]
View(NewCodes)
stringdist(NewCodes[1, subDesc], OldCodes[,subDesc])
OldCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="E1:F896")
OldCodes <- as.data.table(OldCodes)
OldCodes[,Test := toupper(Test)]
OldCodes[,subDesc := str_match(Test, "(.*)\\(")[,2]]
OldCodes[is.na(subDesc), subDesc := Test]
NewCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="A1:C503")
NewCodes <- as.data.table(NewCodes)
NewCodes[,Description:= toupper(Description)]
NewCodes[,subDesc := str_match(Description, "(.*)\\(")[,2]]
NewCodes[is.na(subDesc), subDesc := Description]
stringdist(NewCodes[1, subDesc], OldCodes[,subDesc])
Distances <- data.table(Distance=stringdist(NewCodes[1, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,subDesc])
View(Distances)
View(Distances)
Distances <- cbind(Distances, OldCodes[,subDesc])
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Index <- 1
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
View(Distances)
paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
Distances <- Distances[Distance < 10]
paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setnames(Distances, "V1", "OldTestDesc")
setorder(Distances, Distance)
Distances <- Distances[Distance < 10]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes, OldCodes, maxDistance = 7)
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes, OldCodes, maxDistance = 7)
View(DT2)
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10][1:maxItems]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
OldCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="E1:F896")
OldCodes <- as.data.table(OldCodes)
OldCodes[,Test := toupper(Test)]
OldCodes[,subDesc := str_match(Test, "(.*)\\(")[,2]]
OldCodes[is.na(subDesc), subDesc := Test]
OldCodes[,subDesc := str_trim(subDesc)]
NewCodes <- readxl::read_xlsx("./WinpathTestCodeTool.xlsx", sheet="Codes", range="A1:C503")
NewCodes <- as.data.table(NewCodes)
NewCodes[,Description:= toupper(Description)]
NewCodes[,subDesc := str_match(Description, "(.*)\\(")[,2]]
NewCodes[is.na(subDesc), subDesc := Description]
NewCodes[,subDesc := str_trim(subDesc)]
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10][1:maxItems]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10][1:max(.N, maxItems)]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
Index <- 100
Distances <- data.table(Distance=stringdist(NewCodes[Index, subDesc], OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
currentItem
View(Distances)
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
View(Distances)
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, -Distance)
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
Index = 100
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, -Distance)
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
maxItems=3
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
View(Distances)
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, -Distance)
View(Distances)
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
View(Distances)
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
View(Distances)
resultStr <- paste0(Distances[,`LabCentre Code`], "(", Distances[,subDesc], ")", collapse=";")
locateLowStrindistMatches <- function(DT, MatchDT, maxDistance = 10, maxItems=3){
for (Index in 1:nrow(DT)) {
currentItem <- NewCodes[Index, subDesc]
Distances <- data.table(Distance=stringdist(currentItem, OldCodes[,subDesc]))
Distances <- cbind(Distances, OldCodes[,.(`LabCentre Code`, subDesc)])
setorder(Distances, Distance)
Distances <- Distances[Distance < 10][1:min(.N, maxItems)]
resultStr <- paste0(Distances[,subDesc], "(", Distances[,`LabCentre Code`], ")", collapse=";")
DT[Index, MatchedCodes := resultStr]
}
DT
}
DT2 <- locateLowStrindistMatches(NewCodes[str_length(subDesc)>10], OldCodes, maxDistance = 7)
View(DT2)
?stringdist
stringdistmatrix(OldCodes[,subDesc], NewCodes[,subDesc])
x<-stringdistmatrix(OldCodes[,subDesc], NewCodes[,subDesc])
View(x)
x<-stringdistmatrix(OldCodes[,subDesc], NewCodes[,subDesc])
x<-as.data.table(x)
x[,NewCodeIndex:=.I]
x<-melt.data.table(x, id.vars="NewCodeIndex")
View(x)
x[,variable:=as.numeric(substr(variable, 2, str_length(variable)))]
View(x)
x<-x[value <= 7]
View(x)
x<-stringdistmatrix(OldCodes[,subDesc], NewCodes[,subDesc])
x<-as.data.table(x)
x[,NewCodeIndex:=.I]
x<-melt.data.table(x, id.vars="NewCodeIndex")
setnames(x, C("variable", "value"), c("OldCodeIndex", "Distance"))
x<-x[Distance <= 7]
x[,OldCodeIndex:=as.numeric(substr(OldCodeIndex, 2, str_length(OldCodeIndex)))]
x<-stringdistmatrix(OldCodes[,subDesc], NewCodes[,subDesc])
x<-as.data.table(x)
x[,NewCodeIndex:=.I]
x<-melt.data.table(x, id.vars="NewCodeIndex")
setnames(x, c("variable", "value"), c("OldCodeIndex", "Distance"))
x<-x[Distance <= 7]
x[,OldCodeIndex:=as.numeric(substr(OldCodeIndex, 2, str_length(OldCodeIndex)))]
View(x)
y <- x[,.SD[order(Distance)][1:3], NewCodeIndex]
View(y)
<- y[!is.na(Distance)]
y <- y[!is.na(Distance)]
View(y)
setorder(y, NewCodeIndex, Distance)
View(y)
source("W:/Pathology/Biochem/LKBecker/Projects/autoTester_CP/clinisys_Extract_Scenarios.R")
source("W:/Pathology/Biochem/LKBecker/Projects/autoTester_CP/clinisys_Extract_Scenarios.R")
